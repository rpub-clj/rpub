import*as l from"cherry-cljs/cljs.core.js";import*as o from"rads.dependency";var d=function(e){const a=e,n=l.__destructure_map.call(null,a),r=l.get.call(null,n,l.keyword("rpub.lib.dag/nodes")),c=l.get.call(null,n,l.keyword("rpub.lib.dag/edges")),u=o.topo_sort.call(null,c);return l.into.call(null,l.array_map(),l.map.call(null,function(t){return l.vector(t,l.filter.call(null,o.transitive_dependents.call(null,c,t),u))},l.filter.call(null,function(t){return l.get_in.call(null,r,l.vector(t,l.keyword("push")))},o.nodes.call(null,c))))},s=function(e,a){return l.reduce.call(null,function(n,r){const c=r,u=l.nth.call(null,c,0,null),t=l.nth.call(null,c,1,null);return o.depend.call(null,n,t,u)},e,a)},p=function(e){const a=e,n=l.__destructure_map.call(null,a),r=l.get.call(null,n,l.keyword("nodes")),c=l.get.call(null,n,l.keyword("edges")),u=s.call(null,o.graph.call(null),c);return l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),u,l.keyword("rpub.lib.dag/values"),l.array_map(),l.keyword("rpub.lib.dag/dependents"),d.call(null,l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),u)))},_=function(e,a){const n=l.get_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/nodes"),a,l.keyword("calc"))),r=l.assoc.call(null,l.keyword("acc").call(null,e),l.keyword("rpub.lib.dag/values"),l.keyword("rpub.lib.dag/values").call(null,e)),c=n.call(null,r);return l.assoc_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/values"),a),c)},g=function(e,a,n){const r=l.get_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/nodes"),a,l.keyword("push"))),c=l.get_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/dependents"),a)),u=l.update.call(null,e,l.keyword("acc"),r,n);return l.reduce.call(null,_,u,c)},b=function(e,a,n,r){const c=s.call(null,l.keyword("rpub.lib.dag/edges").call(null,e),r),u=l.assoc.call(null,l.assoc_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/nodes"),a),n),l.keyword("rpub.lib.dag/edges"),c);return _.call(null,l.assoc.call(null,u,l.keyword("rpub.lib.dag/dependents"),d.call(null,u)),a)},y=function(e,a){const n=l.update.call(null,l.update.call(null,e,l.keyword("rpub.lib.dag/nodes"),l.dissoc,a),l.keyword("rpub.lib.dag/edges"),o.remove_all,a);return l.assoc.call(null,n,l.keyword("rpub.lib.dag/dependents"),d.call(null,n))},i=function(e){if(l.truth_.call(null,e)){const a=function(n){const r=l.array.call(null),c=l.alength.call(null,arguments);let u=0;for(;;){if(u<c){r.push(arguments[u]),u=u+1;continue}break}const t=0<l.alength.call(null,r)?new l.IndexedSeq(r.slice(0),0,null):null;return a.cljs$core$IFn$_invoke$arity$variadic(t)};return a.cljs$core$IFn$_invoke$arity$variadic=function(n){const r=l.apply.call(null,e,n);return l.prn.call(null,e,l.array_map(l.keyword("args"),n,l.keyword("ret"),r)),r},a.cljs$lang$maxFixedArity=0,a.cljs$lang$applyTo=function(n){return this.cljs$core$IFn$_invoke$arity$variadic(l.seq.call(null,n))},a}},w=function(e){return l.update.call(null,e,l.keyword("rpub.lib.dag/nodes"),function(a){return l.update_vals.call(null,a,l.comp.call(null,function(n){return l.update.call(null,n,l.keyword("push"),i)},function(n){return l.update.call(null,n,l.keyword("calc"),i)}))})};export{p as __GT_dag,s as add_edges,b as add_node,w as add_tracing,d as dependents,g as push,_ as recalculate,y as remove_node,i as trace};
