import*as l from"cherry-cljs/cljs.core.js";import*as o from"rads.dependency";var s=function(a){const n=a,e=l.__destructure_map.call(null,n),r=l.get.call(null,e,l.keyword("rpub.lib.dag/nodes")),u=l.get.call(null,e,l.keyword("rpub.lib.dag/edges")),c=o.topo_sort.call(null,u);return l.into.call(null,l.array_map(),l.map.call(null,function(t){return l.vector(t,l.filter.call(null,o.transitive_dependents.call(null,u,t),c))},l.filter.call(null,function(t){return l.get_in.call(null,r,l.vector(t,l.keyword("push")))},o.nodes.call(null,u))))},d=function(a,n){return l.reduce.call(null,function(e,r){const u=r,c=l.nth.call(null,u,0,null),t=l.nth.call(null,u,1,null);return o.depend.call(null,e,t,c)},a,n)},g=function(a){const n=a,e=l.__destructure_map.call(null,n),r=l.get.call(null,e,l.keyword("nodes")),u=l.get.call(null,e,l.keyword("edges")),c=d.call(null,o.graph.call(null),u);return l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),c,l.keyword("rpub.lib.dag/values"),l.array_map(),l.keyword("rpub.lib.dag/dependents"),s.call(null,l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),c)))},i=function(a,n){const e=l.get_in.call(null,a,l.vector(l.keyword("rpub.lib.dag/nodes"),n,l.keyword("calc"))),r=l.assoc.call(null,l.keyword("acc").call(null,a),l.keyword("rpub.lib.dag/values"),l.keyword("rpub.lib.dag/values").call(null,a)),u=e.call(null,r);return l.assoc_in.call(null,a,l.vector(l.keyword("rpub.lib.dag/values"),n),u)},p=(()=>{const a=function(n){switch(l.alength.call(null,arguments)){case 2:return a.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);case 3:return a.cljs$core$IFn$_invoke$arity$3(arguments[0],arguments[1],arguments[2]);default:throw new Error(l.str.call(null,"Invalid arity: ",l.alength.call(null,arguments)))}};return a.cljs$core$IFn$_invoke$arity$2=function(n,e){return p.call(null,n,e,l.keyword("rpub.lib.dag/no-value"))},a.cljs$core$IFn$_invoke$arity$3=function(n,e,r){const u=l.get_in.call(null,n,l.vector(l.keyword("rpub.lib.dag/nodes"),e,l.keyword("push"))),c=l.get_in.call(null,n,l.vector(l.keyword("rpub.lib.dag/dependents"),e)),t=l.truth_.call(null,l._EQ_.call(null,r,l.keyword("rpub.lib.dag/no-value")))?l.update.call(null,n,l.keyword("acc"),u):l.update.call(null,n,l.keyword("acc"),u,r);return l.reduce.call(null,i,t,c)},a.cljs$lang$maxFixedArity=3,a})(),b=function(a,n,e,r){const u=d.call(null,l.keyword("rpub.lib.dag/edges").call(null,a),r),c=l.assoc.call(null,l.assoc_in.call(null,a,l.vector(l.keyword("rpub.lib.dag/nodes"),n),e),l.keyword("rpub.lib.dag/edges"),u);return i.call(null,l.assoc.call(null,c,l.keyword("rpub.lib.dag/dependents"),s.call(null,c)),n)},y=function(a,n){const e=l.update.call(null,l.update.call(null,a,l.keyword("rpub.lib.dag/nodes"),l.dissoc,n),l.keyword("rpub.lib.dag/edges"),o.remove_all,n);return l.assoc.call(null,e,l.keyword("rpub.lib.dag/dependents"),s.call(null,e))},_=function(a){if(l.truth_.call(null,a)){const n=function(e){const r=l.array.call(null),u=l.alength.call(null,arguments);let c=0;for(;;){if(c<u){r.push(arguments[c]),c=c+1;continue}break}const t=0<l.alength.call(null,r)?new l.IndexedSeq(r.slice(0),0,null):null;return n.cljs$core$IFn$_invoke$arity$variadic(t)};return n.cljs$core$IFn$_invoke$arity$variadic=function(e){const r=l.apply.call(null,a,e);return l.prn.call(null,a,l.array_map(l.keyword("args"),e,l.keyword("ret"),r)),r},n.cljs$lang$maxFixedArity=0,n.cljs$lang$applyTo=function(e){return this.cljs$core$IFn$_invoke$arity$variadic(l.seq.call(null,e))},n}},w=function(a){return l.update.call(null,a,l.keyword("rpub.lib.dag/nodes"),function(n){return l.update_vals.call(null,n,l.comp.call(null,function(e){return l.update.call(null,e,l.keyword("push"),_)},function(e){return l.update.call(null,e,l.keyword("calc"),_)}))})};export{g as __GT_dag,d as add_edges,b as add_node,w as add_tracing,s as dependents,p as push,i as recalculate,y as remove_node,_ as trace};
