import*as n from"cherry-cljs/cljs.core.js";import{useSyncExternalStore as w,useId as f}from"react";var d=function(r,a){const l=r,t=n.__destructure_map.call(null,l),c=n.get.call(null,t,n.keyword("conn")),e=n.get.call(null,t,n.keyword("query")),i=f.call(null),p=function($){return n.add_watch.call(null,c,i,(()=>{const o=function(s){const u=n.array.call(null),g=n.alength.call(null,arguments);let _=0;for(;;){if(_<g){u.push(arguments[_]),_=_+1;continue}break}const k=0<n.alength.call(null,u)?new n.IndexedSeq(u.slice(0),0,null):null;return o.cljs$core$IFn$_invoke$arity$variadic(k)};return o.cljs$core$IFn$_invoke$arity$variadic=function(s){return $.call(null)},o.cljs$lang$maxFixedArity=0,o.cljs$lang$applyTo=function(s){return this.cljs$core$IFn$_invoke$arity$variadic(n.seq.call(null,s))},o})()),function(){return n.remove_watch.call(null,c,i)}},m=function(){return e.call(null,n.deref.call(null,c),a)};return w.call(null,p,m)},y=function(r,a){const l=r,t=n.__destructure_map.call(null,l),c=n.get.call(null,t,n.keyword("conn")),e=n.get.call(null,t,n.keyword("transact"));return n.swap_BANG_.call(null,c,e,a)},h=function(r){const a=r,l=n.__destructure_map.call(null,a),t=n.get.call(null,l,n.keyword("conn")),c=n.get.call(null,l,n.keyword("query")),e=n.get.call(null,l,n.keyword("transact"));return n.array_map(n.keyword("conn"),t,n.keyword("query"),c,n.keyword("transact"),e,n.keyword("subscribe"),d,n.keyword("dispatch"),y)};export{y as dispatch,d as subscribe,h as substrate};
