import*as l from"cherry-cljs/cljs.core.js";if(!(typeof a<"u"))var a=l.atom.call(null,null);var _=function(r){return l.reset_BANG_.call(null,a,r)},t=function(r){if(l.truth_.call(null,(()=>{const n=l.vector_QMARK_.call(null,r);return l.truth_.call(null,n)?l.qualified_keyword_QMARK_.call(null,l.first.call(null,r)):n})()))return null;throw l.ex_info.call(null,"Invalid selector",l.array_map(l.keyword("selector"),r))},u=(()=>{const r=function(n){switch(l.alength.call(null,arguments)){case 1:return r.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return r.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:throw new Error(l.str.call(null,"Invalid arity: ",l.alength.call(null,arguments)))}};return r.cljs$core$IFn$_invoke$arity$1=function(n){return u.call(null,l.deref.call(null,a),n)},r.cljs$core$IFn$_invoke$arity$2=function(n,e){return t.call(null,e),l.keyword("subscribe").call(null,n).call(null,n,e)},r.cljs$lang$maxFixedArity=2,r})(),c=function(r){if(l.truth_.call(null,(()=>{const n=l.vector_QMARK_.call(null,r);return l.truth_.call(null,n)?l.qualified_keyword_QMARK_.call(null,l.first.call(null,r)):n})()))return null;throw l.ex_info.call(null,"Invalid event",l.array_map(l.keyword("event"),r))},i=(()=>{const r=function(n){switch(l.alength.call(null,arguments)){case 1:return r.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return r.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:throw new Error(l.str.call(null,"Invalid arity: ",l.alength.call(null,arguments)))}};return r.cljs$core$IFn$_invoke$arity$1=function(n){return i.call(null,l.deref.call(null,a),n)},r.cljs$core$IFn$_invoke$arity$2=function(n,e){return c.call(null,e),l.keyword("dispatch").call(null,n).call(null,n,e)},r.cljs$lang$maxFixedArity=2,r})();export{c as assert_valid_event,t as assert_valid_selector,i as dispatch,a as global,_ as set_global_BANG_,u as subscribe};
