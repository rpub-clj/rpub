import*as l from"cherry-cljs/cljs.core.js";import*as _ from"rads.dependency";var v=l.atom.call(null,!1),p=function(){return l.deref.call(null,v)},I=function(){return l.reset_BANG_.call(null,v,!0)},i=function(n){const e=n,a=l.__destructure_map.call(null,e),t=l.get.call(null,a,l.keyword("rpub.lib.dag/nodes")),r=l.get.call(null,a,l.keyword("rpub.lib.dag/edges")),c=_.topo_sort.call(null,r);return l.into.call(null,l.array_map(),l.map.call(null,function(u){return l.vector(u,l.filter.call(null,_.transitive_dependents.call(null,r,u),c))},l.filter.call(null,function(u){return l.get_in.call(null,t,l.vector(u,l.keyword("push")))},_.nodes.call(null,r))))},y=function(n,e){return l.reduce.call(null,function(a,t){const r=t,c=l.nth.call(null,r,0,null),u=l.nth.call(null,r,1,null);return _.depend.call(null,a,u,c)},n,e)},b=function(n,e){const a=n,t=l.__destructure_map.call(null,a),r=t,c=l.get.call(null,t,l.keyword("nodes"));return l.every_QMARK_.call(null,function(u){return l.contains_QMARK_.call(null,c,u)},e)},w=function(n){const e=n,a=l.__destructure_map.call(null,e),t=a,r=l.get.call(null,a,l.keyword("edges")),c=l.remove.call(null,function(u){return b.call(null,t,u)},r);if(l.truth_.call(null,l.seq.call(null,c)))throw l.ex_info.call(null,l.str.call(null,"Invalid edges config: ",l.pr_str.call(null,c)),l.array_map(l.keyword("invalid-edges"),c))},G=function(n){const e=n,a=l.__destructure_map.call(null,e),t=a,r=l.get.call(null,a,l.keyword("nodes")),c=l.get.call(null,a,l.keyword("edges"));l.truth_.call(null,p.call(null))&&w.call(null,t);const u=y.call(null,_.graph.call(null),c);return l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),u,l.keyword("rpub.lib.dag/values"),l.array_map(),l.keyword("rpub.lib.dag/dependents"),i.call(null,l.array_map(l.keyword("rpub.lib.dag/nodes"),r,l.keyword("rpub.lib.dag/edges"),u)))},k=function(n){return l.assoc.call(null,l.keyword("rpub.lib.dag/acc").call(null,n),l.keyword("rpub.lib.dag/values"),l.keyword("rpub.lib.dag/values").call(null,n))},f=function(n,e){const t=l.get_in.call(null,n,l.vector(l.keyword("rpub.lib.dag/nodes"),e,l.keyword("calc"))).call(null,k.call(null,n));return l.assoc_in.call(null,n,l.vector(l.keyword("rpub.lib.dag/values"),e),t)},$=function(n,e){if(l.truth_.call(null,l.contains_QMARK_.call(null,l.keyword("rpub.lib.dag/nodes").call(null,n),e)))return null;throw l.ex_info.call(null,l.str.call(null,"Unknown node: ",e),l.array_map(l.keyword("node-key"),e))},m=(()=>{const n=function(e){switch(l.alength.call(null,arguments)){case 2:return n.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);case 3:return n.cljs$core$IFn$_invoke$arity$3(arguments[0],arguments[1],arguments[2]);default:throw new Error(l.str.call(null,"Invalid arity: ",l.alength.call(null,arguments)))}};return n.cljs$core$IFn$_invoke$arity$2=function(e,a){return m.call(null,e,a,l.keyword("rpub.lib.dag/no-value"))},n.cljs$core$IFn$_invoke$arity$3=function(e,a,t){l.truth_.call(null,p.call(null))&&$.call(null,e,a);const r=l.get_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/nodes"),a,l.keyword("push"))),c=l.get_in.call(null,e,l.vector(l.keyword("rpub.lib.dag/dependents"),a)),u=l.truth_.call(null,l._EQ_.call(null,t,l.keyword("rpub.lib.dag/no-value")))?l.update.call(null,e,l.keyword("rpub.lib.dag/acc"),r):l.update.call(null,e,l.keyword("rpub.lib.dag/acc"),r,t);return l.reduce.call(null,f,u,c)},n.cljs$lang$maxFixedArity=3,n})(),j=function(n,e,a,t){const r=y.call(null,l.keyword("rpub.lib.dag/edges").call(null,n),t),c=l.assoc.call(null,l.assoc_in.call(null,n,l.vector(l.keyword("rpub.lib.dag/nodes"),e),a),l.keyword("rpub.lib.dag/edges"),r);return f.call(null,l.assoc.call(null,c,l.keyword("rpub.lib.dag/dependents"),i.call(null,c)),e)},F=function(n,e){const a=l.update.call(null,l.update.call(null,n,l.keyword("rpub.lib.dag/nodes"),l.dissoc,e),l.keyword("rpub.lib.dag/edges"),_.remove_all,e);return l.assoc.call(null,a,l.keyword("rpub.lib.dag/dependents"),i.call(null,a))},x=function(n,e){const a=function(r,c){const u=function(s){const o=l.array.call(null),g=l.alength.call(null,arguments);let d=0;for(;;){if(d<g){o.push(arguments[d]),d=d+1;continue}break}const h=0<l.alength.call(null,o)?new l.IndexedSeq(o.slice(0),0,null):null;return u.cljs$core$IFn$_invoke$arity$variadic(h)};return u.cljs$core$IFn$_invoke$arity$variadic=function(s){const o=l.apply.call(null,c,s),g=l.array_map(l.keyword("key"),r,l.keyword("args"),s,l.keyword("ret"),o);return l.transduce.call(null,e,l.constantly.call(null,null),l.vector(g)),o},u.cljs$lang$maxFixedArity=0,u.cljs$lang$applyTo=function(s){return this.cljs$core$IFn$_invoke$arity$variadic(l.seq.call(null,s))},u},t=function(r,c){const u=c,s=l.truth_.call(null,l.keyword("calc").call(null,c))?l.update.call(null,u,l.keyword("calc"),function(o){return a.call(null,r,o)}):u;return l.truth_.call(null,l.keyword("push").call(null,c))?l.update.call(null,s,l.keyword("push"),function(o){return a.call(null,r,o)}):s};return l.update.call(null,n,l.keyword("rpub.lib.dag/nodes"),function(r){return l.into.call(null,l.array_map(),l.map.call(null,function(c){const u=c,s=l.nth.call(null,u,0,null),o=l.nth.call(null,u,1,null);return l.vector(s,t.call(null,s,o))},r))})},E=(()=>{const n=function(e){const a=l.array.call(null),t=l.alength.call(null,arguments);let r=0;for(;;){if(r<t){a.push(arguments[r]),r=r+1;continue}break}const c=0<l.alength.call(null,a)?new l.IndexedSeq(a.slice(0),0,null):null;return n.cljs$core$IFn$_invoke$arity$variadic(c)};return n.cljs$core$IFn$_invoke$arity$variadic=function(e){return l.reduce.call(null,function(a,t){return l.merge_with.call(null,l.into,a,t)},l.array_map(l.keyword("nodes"),l.array_map(),l.keyword("edges"),l.vector()),e)},n.cljs$lang$maxFixedArity=0,n.cljs$lang$applyTo=function(e){return this.cljs$core$IFn$_invoke$arity$variadic(l.seq.call(null,e))},n})(),Q=function(n){return l.keyword("rpub.lib.dag/nodes").call(null,n)},A=function(n){return l.mapcat.call(null,function(e){const a=e,t=l.nth.call(null,a,0,null),r=l.nth.call(null,a,1,null);return l.map.call(null,function(c){return l.vector(t,c)},r)},l.keyword("dependencies").call(null,l.keyword("rpub.lib.dag/edges").call(null,n)))},T=function(n,e){if(l.truth_.call(null,l.every_QMARK_.call(null,l.keyword("rpub.lib.dag/nodes").call(null,n),e)))return null;throw l.ex_info.call(null,l.str.call(null,"Invalid node keys: ",l.pr_str.call(null,e)),l.array_map(l.keyword("node-keys"),e))};export{G as __GT_dag,y as add_edges,j as add_node,$ as assert_contains_node,w as assert_valid_edges_config,T as assert_valid_node_keys,p as assertions_enabled_QMARK_,k as calc_input,i as dependents,A as edges,I as enable_assertions_BANG_,E as merge_configs,Q as nodes,m as push,f as recalculate,F as remove_node,b as valid_edge_config_QMARK_,x as wrap_tracing};
